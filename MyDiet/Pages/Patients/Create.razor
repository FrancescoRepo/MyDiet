@using MyDiet.Models.Dtos;
@using MyDiet.Services.IService;

@page "/patients/create"
@inject IPatientService _patientsService
@inject NavigationManager NavigationManager
@inject IMatToaster Toaster

<h3>Create Patient</h3>
<EditForm EditContext="@EditContext" OnValidSubmit="ValidSubmit">
    <DataAnnotationsValidator />
    <div class="mat-layout-grid">
        <div class="mat-layout-grid-inner">
            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12">
                <p>
                    <MatTextField Label="Fiscal Code" @bind-Value="@patientDto.FiscalCode" FullWidth="true" />
                    <ValidationMessage For="@(() => patientDto.FiscalCode)" />
                </p>
                <p>
                    <MatTextField Label="Name" @bind-Value="@patientDto.Name" FullWidth="true" />
                    <ValidationMessage For="@(() => patientDto.Name)" />
                </p>
                <p>
                    <MatTextField Label="Surname" @bind-Value="@patientDto.Surname" FullWidth="true" />
                    <ValidationMessage For="@(() => patientDto.Surname)" />
                </p>
                <p>
                    <MatSelect Label="Gender" @bind-Value="@patientDto.Gender" FullWidth="true" Outlined="true">
                        <MatOptionString Value="male">Male</MatOptionString>
                        <MatOptionString Value="female">Female</MatOptionString>
                    </MatSelect>
                    <ValidationMessage For="@(() => patientDto.Gender)" />
                </p>
                <p>
                    <MatTextField Label="Age" @bind-Value="@patientDto.Age" FullWidth="true" />
                    <ValidationMessage For="@(() => patientDto.Age)" />
                </p>
                <p>
                    <MatTextField Label="Weight" @bind-Value="@patientDto.Weight" FullWidth="true" />
                    <ValidationMessage For="@(() => patientDto.Weight)" />
                </p>
                <p>
                    <MatTextField Label="Email" @bind-Value="@patientDto.Email" FullWidth="true" IconTrailing="true" Icon="mail_outline" />
                    <ValidationMessage For="@(() => patientDto.Email)" />
                </p>
                <p>
                    <MatTextField Label="Phone" @bind-Value="@patientDto.Phone" FullWidth="true" />
                    <ValidationMessage For="@(() => patientDto.Phone)" />
                </p>
                <MatButton Type="submit" Raised="true" Style="background: green;" Icon="save">Save</MatButton>
                <MatButton Style="background: red;" Type="button" Raised="true" @onclick="Back" Icon="block">Cancel</MatButton>
            </div>
        </div>
    </div>
</EditForm>

@code {
    private EditContext EditContext;
    private PatientDto patientDto = new PatientDto();
    private ValidationMessageStore messages;

    protected override void OnInitialized()
    {
        EditContext = new EditContext(patientDto);
        EditContext.OnFieldChanged += EditContext_OnFieldChanged;
        messages = new ValidationMessageStore(EditContext);
        base.OnInitialized();
    }

    async Task ValidSubmit(EditContext editContext)
    {
        PatientDto patientDtoSubmitted = editContext.Model as PatientDto;

        await _patientsService.Create(patientDtoSubmitted);
        Toaster.Add("Patient added", MatToastType.Success, "Success");

        NavigationManager.NavigateTo("/patients");
    }

    void Back()
    {
        NavigationManager.NavigateTo("/patients");
    }

    private void EditContext_OnFieldChanged(object sender,
                                               FieldChangedEventArgs e)
    {
        string fieldName = e.FieldIdentifier.FieldName;
        PatientDto dto = e.FieldIdentifier.Model as PatientDto;
        bool isUnique = _patientsService.CheckIfUnique(fieldName, dto);

        if (isUnique)
        {
            messages.Add(e.FieldIdentifier, $"{e.FieldIdentifier.FieldName} must be unique");
        }
        else
        {
            messages.Clear(e.FieldIdentifier);
        }
    }
}
