@using MyDiet.Models.Dtos;
@using MyDiet.Services.IService

@page "/productcategories"
@inject IProductCategoryService _productCategoriesService
@inject NavigationManager NavigationManager
@inject IMatDialogService MatDialogService
@inject IMatToaster Toaster

<h3>Product Categories</h3>
<div class="mat-layout-grid">
    <div>
        <MatButton Raised="true" Type="button" Style="background: green;" Icon="add_box" @onclick="Create">Add Product Category</MatButton>
    </div>
    <div class="mat-layout-grid-inner">
        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12">
            @if (productCategories.Count > 0)
            {
                <MatTable Items="@productCategories" Class="mat-elevation-z6" Style="text-align: center; white-space: nowrap">
                    <MatTableHeader>
                        <th style="text-align: center;">#</th>
                        <th style="text-align: center; width: 100%;">Category</th>
                        <th style="text-align: center;">Options</th>
                    </MatTableHeader>
                    <MatTableRow>
                        <td>@context.Id</td>
                        <td>@context.Description</td>
                        <td>
                            <MatButton Raised="true" @onclick="@(_ => Edit(@context.Id))" Style="background: orange;" Icon="create">Edit</MatButton>
                            <MatButton Raised="true" Style="background: red;" @onclick="@(_ => Remove(@context))" Icon="delete_sweep">Remove</MatButton>
                        </td>
                    </MatTableRow>
                </MatTable>
            } else
            {
                <br />
                <Jumbotron Message="No Product Categories added yet"/>
            }
        </div>
    </div>
</div>

@code {
    private IList<ProductCategoryDto> productCategories { get; set; } = new List<ProductCategoryDto>();

    protected override async Task OnInitializedAsync()
    {
        productCategories = await _productCategoriesService.GetAll();
    }

    void Create()
    {
        NavigationManager.NavigateTo($"/productcategories/create");
    }

    void Edit(int id)
    {
        NavigationManager.NavigateTo($"/productcategory/{id}/edit");
    }

    async Task Remove(ProductCategoryDto productCategory)
    {
        var result = await MatDialogService.AskAsync("Are you sure you want to delete the selected product category?", new string[] { "Yes", "Cancel" });
        if (result == "Yes")
        {
            await _productCategoriesService.Delete(productCategory.Id);
            Toaster.Add("Product Category Deleted", MatToastType.Success, "Success");
            productCategories.Remove(productCategory);
        }
    }
}
