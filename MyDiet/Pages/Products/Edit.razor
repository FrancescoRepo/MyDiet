@using MyDiet.Models.Dtos;
@using MyDiet.Services.IService;

@page "/products/{id:int}/edit"
@inject IProductService _productService
@inject IProductCategoryService _productCategoryService
@inject NavigationManager NavigationManager
@inject IMatToaster Toaster

<h3>Edit ProductCategory</h3>
@if (EditContext == null)
{
    <h3 class="mat-subtitle1">Loading</h3>
    <MatProgressBar Indeterminate="true" />
}
else
{
    <EditForm EditContext="@EditContext" OnSubmit="ValidSubmit">
        <DataAnnotationsValidator />
        <div class="mat-layout-grid">
            <div class="mat-layout-grid-inner">
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12">
                    <p>
                        <MatTextField Label="Product Name" @bind-Value="@productDto.Name" FullWidth="true" />
                        <ValidationMessage For="@(() => productDto.Name)" />
                    </p>
                    <p>
                        <MatTextField Label="Description" @bind-Value="@productDto.Description" FullWidth="true" />
                        <ValidationMessage For="@(() => productDto.Description)" />
                    </p>
                    <p>
                        <MatSelectItem Items="@productDto.ProductCategories" @bind-Value="@productDto.ProductCategory" FullWidth="true" Outlined="true" Label="Product Categories">
                            <ItemTemplate Context="productCategoryContext">
                                <span>@productCategoryContext?.Description</span>
                            </ItemTemplate>
                        </MatSelectItem>
                    </p>
                    <div class="mat-layout-grid-cell mat-layout-grid-cell-span-3">
                        <MatButton Type="submit" Raised="true" Style="background: green;" Icon="save">Save</MatButton>
                        <MatButton Type="button" Raised="true" Style="background: red;" @onclick="Back" Icon="block">Cancel</MatButton>
                    </div>
                </div>
            </div>
        </div>
    </EditForm>
}


@code {
    [Parameter]
    public int id { get; set; }

    private EditContext EditContext;
    private ProductDto productDto = new ProductDto();
    private ValidationMessageStore messages;

    protected override async Task OnInitializedAsync()
    {
        productDto = await _productService.Get(id);
        EditContext = new EditContext(productDto);
        EditContext.OnFieldChanged += EditContext_OnFieldChanged;
        messages = new ValidationMessageStore(EditContext);
    }

    async Task ValidSubmit(EditContext editContext)
    {
        ProductDto product = editContext.Model as ProductDto;

        await _productService.Update(id, product);
        Toaster.Add("Product Updated", MatToastType.Success, "Success");

        Back();
    }

    void Back()
    {
        NavigationManager.NavigateTo("/products");
    }

    private void EditContext_OnFieldChanged(object sender,
                                               FieldChangedEventArgs e)
    {
        string fieldName = e.FieldIdentifier.FieldName;
        ProductDto dto = e.FieldIdentifier.Model as ProductDto;
        bool isUnique = _productService.CheckIfUnique(fieldName, dto);

        if (isUnique)
        {
            messages.Add(e.FieldIdentifier, $"{e.FieldIdentifier.FieldName} must be unique");
        }
        else
        {
            messages.Clear(e.FieldIdentifier);
        }
    }
}
